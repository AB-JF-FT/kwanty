# This file describes a quantum program with classical control flow in OpenQL's intermediate representation (IR).
# The IR provides a low-level description of quantum operations to be executed on a quantum computer.

# The program is generated by OpenQL 0.12.2
pragma @ql.name("test_classical")  # Metadata indicating the name of the program

# Declare a temporary variable
var __1: int @ql.temp()  # A temporary integer variable used for loop iteration

.First  # The name of the first kernel (this kernel does not contain any operations in the output)

.Thenpart  # The name of the kernel for the 'then' part of an if-else construct
    if (creg(0) == creg(1)) {  # Conditional check: if the value in classical register 0 is equal to the value in classical register 1
        x q[0]  # Apply an X gate (NOT gate) to qubit 0 if the condition is true
    } else {
        y q[0]  # Apply a Y gate to qubit 0 if the condition is false
    }

.Loopbody  # The name of the kernel for the body of a loop
    foreach (__1 = 9..0) {  # A loop that iterates with the temporary variable __1 from 9 to 0 (inclusive)
        x q[0]  # Apply an X gate to qubit 0 in each iteration of the loop
    }

.Afterloop  # The name of the kernel for operations after the loop
    y q[0]  # Apply a Y gate to qubit 0 after the loop

.Dowhileloopbody  # The name of the kernel for the body of a do-while loop
    repeat {  # Start of the repeat block
        x q[0]  # Apply an X gate to qubit 0 in each iteration of the loop
    } until (creg(0) >= creg(1))  # Continue the loop until the value in classical register 0 is greater than or equal to the value in classical register 1

.Afterdowhile  # The name of the kernel for operations after the do-while loop
    y q[0]  # Apply a Y gate to qubit 0 after the do-while loop
